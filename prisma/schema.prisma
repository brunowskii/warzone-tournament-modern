// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  role          Role     @default(TEAM)
  name          String
  avatarUrl     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  teams         Team[]
  tournaments   Tournament[] @relation("TournamentAdmins")
  managedTournaments Tournament[] @relation("TournamentManagers")
  auditLogs     AuditLog[]
  submissions   Submission[]
  scoreAdjustments ScoreAdjustment[]
  reviewedMatches Match[] @relation("MatchReviewer")
  
  @@map("users")
}

enum Role {
  ADMIN
  MANAGER
  TEAM
}

model Tournament {
  id              String   @id @default(cuid())
  name            String
  code            String   @unique // Unique tournament code for registration
  mode            GameMode
  format          TeamFormat
  teamSize        Int      // Players per team (1, 2, 3, 4)
  playerCap       Int      // Total players allowed
  totalTeams      Int      // Calculated total teams
  numberOfMatches Int      @default(10)
  topFraggerEnabled Boolean @default(false)
  scoringProfile  Json     // Custom scoring rules
  obsTheme        String   @default("dark")
  obsColumnsOverride Json? // Custom OBS layout override
  status          TournamentStatus @default(PENDING)
  startDate       DateTime?
  startTime       String
  createdAt       DateTime @default(now())
  endedAt         DateTime?
  completedAt     DateTime?
  isDemo          Boolean  @default(false)
  
  // Relations
  ownerId         String
  owner           User     @relation("TournamentAdmins", fields: [ownerId], references: [id])
  managers        User[]   @relation("TournamentManagers")
  teams           Team[]
  matches         Match[]
  scoreAdjustments ScoreAdjustment[]
  auditLogs       AuditLog[]
  obsOverlays     OBSOverlay[]
  playerStats     PlayerStat[]
  
  @@map("tournaments")
}

enum GameMode {
  BR
  RESURGENCE
}

enum TeamFormat {
  SOLO
  DUOS
  TRIOS
  QUADS
}

enum TournamentStatus {
  PENDING
  ACTIVE
  COMPLETED
  ARCHIVED
}

model Team {
  id            String   @id @default(cuid())
  name          String
  code          String   @unique
  accessCode    String   @unique // Unique access code for team registration
  lobby         String
  lobbyNumber   Int?
  teamLeader    String   // Activision ID of team leader
  createdAt     DateTime @default(now())
  
  // Relations
  tournamentId  String
  tournament    Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  userId        String?
  user          User?    @relation(fields: [userId], references: [id])
  matches       Match[]
  scoreAdjustments ScoreAdjustment[]
  players       TeamPlayer[]
  
  @@unique([tournamentId, code])
  @@map("teams")
}

model TeamPlayer {
  id            String   @id @default(cuid())
  activisionId  String
  playerName    String
  isTeamLeader  Boolean  @default(false)
  createdAt     DateTime @default(now())
  
  // Relations
  teamId        String
  team          Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  @@unique([teamId, activisionId])
  @@map("team_players")
}

model PlayerStat {
  id            String   @id @default(cuid())
  activisionId  String
  playerName    String
  totalKills    Int      @default(0)
  totalMatches  Int      @default(0)
  averageKills  Float    @default(0)
  bestKills     Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  tournamentId  String
  tournament    Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  userId        String?
  user          User?    @relation(fields: [userId], references: [id])
  
  @@unique([tournamentId, activisionId])
  @@map("player_stats")
}

model Match {
  id            String   @id @default(cuid())
  matchNumber   Int      // Which match in the tournament (1, 2, 3, etc.)
  position      Int
  teamKills     Int      // Total team kills
  score         Float
  status        SubmissionStatus @default(PENDING)
  submittedAt   DateTime @default(now())
  reviewedAt    DateTime?
  rejectionReason String?
  
  // Relations
  teamCode      String
  team          Team     @relation(fields: [teamCode], references: [code], onDelete: Cascade)
  tournamentId  String
  tournament    Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  reviewedBy    String?
  reviewer      User?    @relation("MatchReviewer", fields: [reviewedBy], references: [id])
  submissions   Submission[]
  playerKills   PlayerKill[]
  
  @@map("matches")
}

model PlayerKill {
  id            String   @id @default(cuid())
  activisionId  String
  playerName    String
  kills         Int
  createdAt     DateTime @default(now())
  
  // Relations
  matchId       String
  match         Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
  
  @@unique([matchId, activisionId])
  @@map("player_kills")
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}

model Submission {
  id            String   @id @default(cuid())
  type          SubmissionType
  fileUrl       String
  fileName      String
  fileSize      Int
  mimeType      String
  createdAt     DateTime @default(now())
  
  // Relations
  matchId       String
  match         Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  
  @@map("submissions")
}

enum SubmissionType {
  SCREENSHOT
  VIDEO
  EVIDENCE
}

model ScoreAdjustment {
  id            String   @id @default(cuid())
  points        Float
  reason        String
  type          AdjustmentType
  appliedAt     DateTime @default(now())
  
  // Relations
  teamCode      String
  team          Team     @relation(fields: [teamCode], references: [code], onDelete: Cascade)
  tournamentId  String
  tournament    Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  appliedBy     String
  applier       User     @relation(fields: [appliedBy], references: [id])
  
  @@map("score_adjustments")
}

enum AdjustmentType {
  PENALTY
  REWARD
  CRASH
}

model AuditLog {
  id            String   @id @default(cuid())
  action        String
  details       String
  metadata      Json?
  attachmentUrl String?
  createdAt     DateTime @default(now())
  
  // Relations
  tournamentId  String?
  tournament    Tournament? @relation(fields: [tournamentId], references: [id])
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  targetTeam    String?
  
  @@map("audit_logs")
}

// OBS Integration
model OBSOverlay {
  id            String   @id @default(cuid())
  tournamentId  String
  type          OverlayType
  theme         OverlayTheme @default(DARK)
  refreshRate   Int      @default(5000)
  showLogos     Boolean  @default(true)
  showStats     Boolean  @default(true)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  
  // Relations
  tournament    Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  
  @@map("obs_overlays")
}

enum OverlayType {
  MINIMAL
  COMPACT
  LEADERBOARD
  FULL
}

enum OverlayTheme {
  DARK
  LIGHT
  TRANSPARENT
}
